package standard

import (
	"errors"
	api "github.com/CoachApplication/coach-api"
)

/**
 * SecuredApplication Decorating Operation for authentication
 */

// AuthorizingDecoratorOperation An operation which decorates another operation and Authorizes before running the Exec()
type AuthorizingDecoratorOperation struct {
	targetOp api.Operation
	authOp   api.Operation

	authOpPropertyId      string
	authSuccessPropertyId string
}

// NewAuthorizingDecoratorOperation Create a new authorizer decorator from an op, and an ops list
// The ops list is expected to contain any Operation objects needed to authorize.
func NewAuthorizingDecoratorOperation(op api.Operation, authOp api.Operation, authOpPropertyId string, authSuccessPropertyId string) *AuthorizingDecoratorOperation {
	return &AuthorizingDecoratorOperation{
		targetOp:              op,
		authOp:                authOp,
		authOpPropertyId:      authOpPropertyId,
		authSuccessPropertyId: authSuccessPropertyId,
	}
}

// Id Provide a unique machine string identifier
func (ado *AuthorizingDecoratorOperation) Id() string {
	return "I.am.The.Authorizind.Decorator" //ado.targetOp.Id()
}

// Ui Define UI elements for the Operation
func (ado *AuthorizingDecoratorOperation) Ui() api.Ui {
	return ado.targetOp.Ui()
}

// Usage Define how the operation is intended to be used
func (ado *AuthorizingDecoratorOperation) Usage() api.Usage {
	return ado.targetOp.Usage()
}

// Properties Provide Exec properties with default values
func (ado *AuthorizingDecoratorOperation) Properties() api.Properties {
	props := NewProperties()

	// auth Operation props
	props.Merge(ado.authOp.Properties())
	// target Operation Properties
	props.Merge(ado.targetOp.Properties())

	return props.Properties()
}

// Validate That the Operation can properly Execute and Authorize
func (ado *AuthorizingDecoratorOperation) Validate() api.Result {
	res := NewResult()

	authProps := ado.authOp.Properties()
	successProp, successPropFound := authProps.Get(ado.authSuccessPropertyId)
	operationProp, operationPropFound := authProps.Get(ado.authOpPropertyId)

	if successPropFound != nil || successProp.Type() != "bool" {
		// this authorization op is not valid, it is either missing its op or success property
		res.MarkFailed()

		if operationPropFound != nil {
			res.AddError(errors.New("Secure API Authorize operation is invalid.  It is missing the operation authorization property."))
		}
		if successPropFound != nil {
			res.AddError(errors.New("Secure API Authorize operation is invalid.  It is missing the authorization success property."))
		} else if successProp.Type() != "bool" {
			res.AddError(errors.New("Secure API Authorize operation is invalid.  The authorization success property is not a bool."))
		}

		res.AddError(errors.New("Secure Builder API could not execute authorized Operation."))
	}
	if operationPropFound != nil || operationProp.Type() != "coach.api.Operation" {
		res.MarkFailed()

		if op, success := operationProp.Get().(api.Operation); !success {
			res.AddError(errors.New("Secure API Authorize operation is invalud. No target operation was provided"))
		} else {
			targetRes := op.Validate()
			res.Merge(targetRes)
		}
	}

	res.MarkFinished()
	return res.Result()
}

// Exec Execute the Operation using passed Properties
func (ado *AuthorizingDecoratorOperation) Exec(props api.Properties) api.Result {
	res := NewResult()

	authProps := ado.authOp.Properties()
	successProp, successPropFound := authProps.Get(ado.authSuccessPropertyId)
	operationProp, operationPropFound := authProps.Get(ado.authOpPropertyId)

	if successPropFound != nil || operationPropFound != nil || successProp.Type() != "bool" {
		// this authorization op is not valid, it is either missing its op or success property

		res.MarkFailed()

		if operationPropFound != nil {
			res.AddError(errors.New("Secure Builder API Authorize operation is invalid.  It is missing the operation authorization property."))
		}
		if successPropFound != nil {
			res.AddError(errors.New("Secure Builder API Authorize operation is invalid.  It is missing the authorization success property."))
		} else if successProp.Type() != "bool" {
			res.AddError(errors.New("Secure Builder API Authorize operation is invalid.  The authorization success property is not a bool."))
		}

		res.AddError(errors.New("Secure Builder API could not execute authorized Operation."))
	} else {

		operationProp.Set(ado.targetOp)

		authResult := ado.authOp.Exec(props)
		<-authResult.Finished()

		res.Merge(authResult)

		if !res.Success() {
			res.MarkFailed()
			res.AddError(errors.New("Operation authorization failed to execute."))
		} else {
			if successProp.Get().(bool) {
				// The Auth op returned a TRUE success value, so run the target Exec

				execResult := ado.targetOp.Exec(props)
				res.Merge(execResult)

				return res.Result()
			} else {
				// The Auth op returned a FALSE success value
				res.MarkFailed()
				res.AddError(errors.New("Authorization failed.  You are not permitted to execute the requested operation: " + ado.Id()))
			}
		}

	}

	res.MarkFinished()
	return res.Result()
}

/**
 * Testing Authorizing Op
 */

type TestAuthOperation struct {
	Allow bool
}

func NewAuthOperation(Allow bool) *TestAuthOperation {
	return &TestAuthOperation{Allow: Allow}
}
func (tao *TestAuthOperation) Id() string {
	return "test.authorize.operation"
}
func (tao *TestAuthOperation) Ui() api.Ui {
	return NewUi(tao.Id(), "", "", "").Ui()
}
func (tao *TestAuthOperation) Usage() api.Usage {
	return (&InternalOperationUsage{}).Usage()
}
func (tao *TestAuthOperation) Properties() api.Properties {
	ops := NewProperties()

	ops.Add(NewTestAuthOperationProperty(nil).Property())

	return ops.Properties()
}
func (tao *TestAuthOperation) Validate() api.Result {
	return MakeSuccessfulResult()
}
func (tao *TestAuthOperation) Exec(props api.Properties) api.Result {
	res := NewResult()

	res.Properties().Add(NewTestAuthSuccessProperty(tao.Allow).Property())

	fmt.Print("PROPERTIES:", res.Properties())
	res.MarkSucceeded()
	res.MarkFinished()
	return res.Result()
}

type TestAuthSuccessProperty struct {
	val bool
}

func NewTestAuthSuccessProperty(allow bool) *TestAuthSuccessProperty {
	prop := &TestAuthSuccessProperty{}
	prop.Set(allow)
	return prop
}
func (tasp *TestAuthSuccessProperty) Property() api.Property {
	return api.Property(tasp)
}
func (tasp *TestAuthSuccessProperty) Type() string {
	return "bools"
}
func (tasp *TestAuthSuccessProperty) Id() string {
	return "test.authorization.success"
}
func (tasp *TestAuthSuccessProperty) Usage() api.Usage {
	return (&ReadonlyPropertyUsage{}).Usage()
}
func (tasp *TestAuthSuccessProperty) Ui() api.Ui {
	return NewUi(tasp.Id(), "Authorization success", "", "").Ui()
}
func (tasp *TestAuthSuccessProperty) Validate() api.Result {
	return MakeSuccessfulResult()
}
func (tasp *TestAuthSuccessProperty) Set(val interface{}) error {
	if forcedVal, err := val.(bool); err {
		tasp.val = forcedVal
		return nil
	} else {
		return errors.New("Incorrect value type assigned to TestAuthSuccessProperty.  Expected boolean")
	}
}
func (tasp *TestAuthSuccessProperty) Get() interface{} {
	return interface{}(tasp.val)
}

type TestAuthOperationProperty struct {
	val api.Operation
}

func NewTestAuthOperationProperty(op api.Operation) *TestAuthOperationProperty {
	prop := &TestAuthOperationProperty{}
	if op != nil {
		prop.Set(op)
	}
	return prop
}
func (taop *TestAuthOperationProperty) Property() api.Property {
	return api.Property(taop)
}
func (taop *TestAuthOperationProperty) Id() string {
	return "test.authorization.operation"
}
func (taop *TestAuthOperationProperty) Type() string {
	return "coach.Property"
}
func (taop *TestAuthOperationProperty) Usage() api.Usage {
	return (&ReadonlyPropertyUsage{}).Usage()
}
func (taop *TestAuthOperationProperty) Ui() api.Ui {
	return NewUi(taop.Id(), "Authorization success", "", "").Ui()
}
func (taop *TestAuthOperationProperty) Validate() api.Result {
	return MakeSuccessfulResult()
}
func (taop *TestAuthOperationProperty) Set(val interface{}) error {
	if forcedVal, err := val.(api.Operation); err {
		taop.val = forcedVal
		return nil
	} else {
		return errors.New("Incorrect value type assigned to TestAuthSuccessProperty.  Expected api.Operation")
	}
}
func (taop *TestAuthOperationProperty) Get() interface{} {
	return interface{}(taop.val)
}
